/ ENTRY THUMB 1D - GENERAL
- cache([entry, entry.user, (current_user==entry.user), "thumb1d"]) do
  .thumb-1d{class: entry.images.blank? ? "noImage" : "",:'data-id' => entry.id, :'data-userid' => entry.user.id}
    .entry
      / LEFT SIDE
      .detailsTop
        %a.user{href: user_entries_path(entry.user.username)}
          .avatar{style: "background-image: url(#{avatar_image(entry.user, 32)}); background-repeat: no-repeat"}
          %p.name= entry.user.username
        .entryType{class: entry.type}

      %a.history.left{href: user_entry_path(entry.user.username, entry)}
        / STARLIGHT
        .starlight
          .img
          %span= entry.starlight
        / only for +image
        .image{style: "background: url(#{entry.main_image._?.url(:stream_header)}) no-repeat top left"}

        %h1.title= entry.title
        / only for noimage
        %h2.titleWatermark= entry.title
        %p.text= truncate(entry.body, :length => 100)

        .divider

      / RIGHT SIDE
      %a.history.tagCloud{href: user_entry_path(entry.user.username, entry)}
        - entry.tags.join_to(What).limit(16).shuffle.each do |tag|
          %div{ class: "s#{tag.position.to_s}" }= tag.noun.name


      / IMAGE THUMBNAILS
      - unless (entry.images.blank? && entry.links.youtube.blank?)
        %ul.entryImages
          - entry.links.youtube.limit(5).each do |link|
            = gallery_1d_youtube(link)
          - entry.images.limit(5).each do |image|
            = gallery_1d_thumb(image)

      /EMOTIONS DETAILS & THUMBS
      - if entry.tags.emotion.first._?.intensity.to_i > 0
        .emotionsWrap
          .emotions-details
            .emotionsHeader
              .img
              emotions
            = render :partial => "/entries/emotions", :locals => {emotion_tags: entry.tags.emotion}
          .emotions-thumb
            = render :partial => "/entries/emotions", :locals => {emotion_tags: entry.tags.emotion}


      / VIDEO PANEL
      - entry.links.youtube.each do |link|
        = render :partial => "entries/video", :locals => {:link => link}


      / DETAILS
      .details
        .rePost.hidden
          reposted by:
          %span.rePostBy username
        .date= time_ago_in_words(entry.created_at)

        - if new_comments?(entry)
          = hidden_field :new_comments, entry.id, :value => entry.new_comment_count, :class => "newComments"

        .comment{class: "#{new_comments?(entry) ? 'new' : ''} #{is_ipad? ? 'ipad' : ''}"}
          .arrow
          %span.text comment
          .count
            .img
            - if new_comments?(entry)
              %span=entry.new_comment_count
            - elsif entry.comments.count > 0
              %span=entry.comments.count
            - else
              %span.empty
      .clear

    .commentsTarget
    .clear


